{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nconst useHttp = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    //requestConfig is an object contains details shown below\n    //applyData has data as parameter which you can use in further oprations\n    // console.log(requestConfig);\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {} || !requestConfig.headers && requestConfig.method == \"POST\" ? {\n          'Content-Type': 'application/json'\n        } : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    //is loading contains true or false condition of loading page\n    error,\n    //this contains error msg\n    sendRequest //this function is used when you want to send a req.\n  };\n};\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\nexport default useHttp;\n\n/* Example(to send req):-\n\n  const { isLoading, error, sendRequest: fetchTasks } = useHttp();\n\n  useEffect(() => {\n    fetchTasks(\n      { url: \"https://react-pr06-default-rtdb.firebaseio.com/tasks.json\" },\n      transformTasks\n    );\n    const transformTasks = (tasksObj) => {\n      const loadedTasks = [];\n\n      for (const taskKey in tasksObj) {\n        loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n    };\n  }, [fetchTasks]);\n  ///////////////////////////////////////////////////////////\n  Example(to send data):-\n   const { isLoading, error, sendRequest: sendTaskRequest } = useHttp();\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskText };\n\n    props.onAddTask(createdTask);\n  };\n\n  const enterTaskHandler = async (taskText) => {\n    sendTaskRequest(\n      {\n        url: 'https://react-pr06-default-rtdb.firebaseio.com/tasks.json',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: { text: taskText },\n      },\n      createTask.bind(null, taskText)\n    );\n  };\n  */\n\nbol;\na;\n// wait top bol p pase nathi ne ?...na okay barabar kai nai chal..okay","map":{"version":3,"names":["useState","useCallback","useHttp","_s","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message","bol","a"],"sources":["/home/dev/Desktop/Vishvas/react projects/react-proejct08-foodApp.v.02/src/hooks/use-http.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n  \n  //requestConfig is an object contains details shown below\n  //applyData has data as parameter which you can use in further oprations\n    // console.log(requestConfig);\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {} || (!requestConfig.headers &&  requestConfig.method==\"POST\") ? {\n          'Content-Type': 'application/json',\n        }: {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, []);\n\n  return {\n    isLoading,\t\t//is loading contains true or false condition of loading page\n    error,\t\t//this contains error msg\n    sendRequest,\t//this function is used when you want to send a req.\n  };\n};\n\nexport default useHttp;\n\n\n\n/* Example(to send req):-\n\n  const { isLoading, error, sendRequest: fetchTasks } = useHttp();\n\n  useEffect(() => {\n    fetchTasks(\n      { url: \"https://react-pr06-default-rtdb.firebaseio.com/tasks.json\" },\n      transformTasks\n    );\n    const transformTasks = (tasksObj) => {\n      const loadedTasks = [];\n\n      for (const taskKey in tasksObj) {\n        loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n    };\n  }, [fetchTasks]);\n  ///////////////////////////////////////////////////////////\n  Example(to send data):-\n   const { isLoading, error, sendRequest: sendTaskRequest } = useHttp();\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskText };\n\n    props.onAddTask(createdTask);\n  };\n\n  const enterTaskHandler = async (taskText) => {\n    sendTaskRequest(\n      {\n        url: 'https://react-pr06-default-rtdb.firebaseio.com/tasks.json',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: { text: taskText },\n      },\n      createTask.bind(null, taskText)\n    );\n  };\n  */\n\n\n\n  bol\n  \n  \na\n  // wait top bol p pase nathi ne ?...na okay barabar kai nai chal..okay\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMQ,WAAW,GAAGP,WAAW,CAAC,OAAOQ,aAAa,EAAEC,SAAS,KAAK;IAEpE;IACA;IACE;IACAL,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAACI,GAAG,EAAE;QAC9CC,MAAM,EAAEL,aAAa,CAACK,MAAM,GAAGL,aAAa,CAACK,MAAM,GAAG,KAAK;QAC3DC,OAAO,EAAEN,aAAa,CAACM,OAAO,GAAGN,aAAa,CAACM,OAAO,GAAG,CAAC,CAAC,IAAK,CAACN,aAAa,CAACM,OAAO,IAAKN,aAAa,CAACK,MAAM,IAAE,MAAO,GAAG;UACzH,cAAc,EAAE;QAClB,CAAC,GAAE,CAAC,CAAC;QACLE,IAAI,EAAEP,aAAa,CAACO,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACT,aAAa,CAACO,IAAI,CAAC,GAAG;MAClE,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MAClCZ,SAAS,CAACW,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAnB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLD,SAAS;IAAG;IACZE,KAAK;IAAG;IACRE,WAAW,CAAE;EACf,CAAC;AACH,CAAC;AAACL,EAAA,CArCID,OAAO;AAuCb,eAAeA,OAAO;;AAItB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIEuB,GAAG;AAGLC,CAAC;AACC"},"metadata":{},"sourceType":"module","externalDependencies":[]}